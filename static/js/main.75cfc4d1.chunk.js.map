{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","dollars","btc","price","dollarChange","bind","assertThisInitialized","btcChange","event","_this$setState","_event$target","target","name","value","setState","defineProperty","replace","toFixed","isNaN","_this$setState2","_event$target2","_this2","fetch","then","response","json","result","bpi","USD","rate_float","react_default","a","createElement","className","type","onChange","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2QA4FeA,qBAvFb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,QAAS,GACTC,IAAK,IACLC,MAAO,IAETV,EAAKW,aAAeX,EAAKW,aAAaC,KAAlBX,OAAAY,EAAA,EAAAZ,CAAAD,IACpBA,EAAKc,UAAYd,EAAKc,UAAUF,KAAfX,OAAAY,EAAA,EAAAZ,CAAAD,IARLA,4EAWDe,GAAO,IAAAC,EAAAC,EACIF,EAAMG,OAArBC,EADWF,EACXE,KAAMC,EADKH,EACLG,MACbjB,KAAKkB,UAALL,EAAA,GAAAf,OAAAqB,EAAA,EAAArB,CAAAe,EACGG,EAAOC,GADVnB,OAAAqB,EAAA,EAAArB,CAAAe,EAAA,OAESD,EAAMG,OAAOE,MAAMG,QAAQ,KAAM,IAAMpB,KAAKI,MAAMG,OAAOc,QAAQ,IAF1ER,IAIIS,MAAMV,EAAMG,OAAOE,MAAMG,QAAQ,KAAM,MACvCpB,KAAKkB,SAAS,CACZZ,IAAK,eAGgB,MAAvBM,EAAMG,OAAOE,OACfjB,KAAKkB,SAAS,CACZZ,IAAK,iDAKDM,GAAO,IAAAW,EAAAC,EACOZ,EAAMG,OAArBC,EADQQ,EACRR,KAAMC,EADEO,EACFP,MACbjB,KAAKkB,UAALK,EAAA,GAAAzB,OAAAqB,EAAA,EAAArB,CAAAyB,EACGP,EAAOC,GADVnB,OAAAqB,EAAA,EAAArB,CAAAyB,EAAA,WAEaX,EAAMG,OAAOE,MAAMG,QAAQ,KAAM,IAAMpB,KAAKI,MAAMG,OAAOc,QAAQ,GAAGD,QAAQ,wBAAyB,MAFlHG,IAIMD,MAAMV,EAAMG,OAAOE,MAAMG,QAAQ,KAAM,MAC3CpB,KAAKkB,SAAS,CACZb,QAAS,eAGc,MAAvBO,EAAMG,OAAOE,OACfjB,KAAKkB,SAAS,CACZb,QAAS,2DAKK,IAAAoB,EAAAzB,KAClB0B,MAAM,qDACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJL,EAAKP,SAAS,CACZX,MAAO,CAACuB,EAAOC,IAAIC,IAAIC,cAEzBR,EAAKP,SAAS,CAAEb,SAAUoB,EAAKrB,MAAME,IAAMmB,EAAKrB,MAAMG,OAAOc,QAAQ,GAAGD,QAAQ,wBAAyB,0CAK7G,OACEc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,iBAEEF,EAAAC,EAAAC,cAAA,SACEE,KAAK,OACLtB,KAAK,UACLC,MAAOjB,KAAKI,MAAMC,QAClBkC,SAAUvC,KAAKQ,gBAGnB0B,EAAAC,EAAAC,cAAA,mBAEEF,EAAAC,EAAAC,cAAA,SACEE,KAAK,OACLtB,KAAK,MACLC,MAAOjB,KAAKI,MAAME,IAClBiC,SAAUvC,KAAKW,cAInBuB,EAAAC,EAAAC,cAAA,wBAAeF,EAAAC,EAAAC,cAAA,KAAGI,KAAO,0CAAV,qBAlFPC,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.75cfc4d1.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      dollars: \"\",\n      btc: \"1\",\n      price: {}\n    }\n    this.dollarChange = this.dollarChange.bind(this)\n    this.btcChange = this.btcChange.bind(this)\n  }\n\n  dollarChange(event) {\n    const {name, value} = event.target\n    this.setState({\n      [name]: value,\n      btc: ((event.target.value.replace(/,/g, '') / this.state.price).toFixed(8))\n    })\n    if (isNaN(event.target.value.replace(/,/g, ''))) {\n        this.setState({\n          btc: \"Invalid...\"\n        })\n    }\n    if (event.target.value === \".\") {\n      this.setState({\n        btc: \"Waiting...\"\n      })\n    }\n  }\n\n  btcChange(event) {\n    const {name, value} = event.target\n    this.setState({\n      [name]: value, \n      dollars: ((event.target.value.replace(/,/g, '') * this.state.price).toFixed(2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"))\n    })\n      if (isNaN(event.target.value.replace(/,/g, ''))) {\n      this.setState({\n        dollars: \"Invalid...\"\n      })\n  }\n    if (event.target.value === \".\") {\n      this.setState({\n        dollars: \"Waiting...\"\n      })\n    }\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.coindesk.com/v1/bpi/currentprice.json\")\n      .then(response => response.json())\n      .then(result => {\n        this.setState({\n          price: [result.bpi.USD.rate_float],\n        })\n        this.setState({ dollars: (this.state.btc * this.state.price).toFixed(2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")})\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <form>\n          <label>\n            $\n            <input \n              type=\"text\" \n              name=\"dollars\" \n              value={this.state.dollars}\n              onChange={this.dollarChange}\n              />\n          </label>\n          <label>\n              BTC\n            <input \n              type=\"text\" \n              name=\"btc\"\n              value={this.state.btc}\n              onChange={this.btcChange}\n              />\n          </label>\n        </form>\n          <h3>Powered by <a href = \"https://www.coindesk.com/price/bitcoin\">CoinDesk</a></h3>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}